name: ReVanced Builder

on:
  schedule:
    - cron: '0 0 * * *' # Daily build
  workflow_dispatch:
    inputs:
      force:
        description: 'Force rebuild'
        type: boolean
        required: false
        default: false
      youtube:  # Default apps, will be merged with dynamic ones
        description: 'Build YouTube'
        type: boolean
        required: false
        default: false
      reddit:
        description: 'Build Reddit'
        type: boolean
        required: false
        default: false

env:
  CONFIG_DIR: configs
  DOWNLOAD_DIR: downloads
  DIST_DIR: dist

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter-apps.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: list-apps
        uses: ./.github/actions/list-apps
      - id: filter-apps
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # For scheduled runs, include all apps
            echo "matrix=${{ steps.list-apps.outputs.matrix }}" >> $GITHUB_OUTPUT
          else
            # For manual runs, filter based on selected apps
            apps=$(echo '${{ steps.list-apps.outputs.matrix }}' | jq -c '[.[] | select(${{ toJSON(github.event.inputs) }}[.]=="true")]')
            echo "matrix=$apps" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.prepare.outputs.matrix) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.DOWNLOAD_DIR }}
          ${{ env.DIST_DIR }}
        key: ${{ runner.os }}-apks-${{ hashFiles('configs/*.yaml') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests
        sudo apt-get update
        sudo apt-get install -y xmlstarlet  # For APK metadata parsing
        # Make apkmd executable
        chmod +x scripts/apkmd

    - name: Download APKs
      env:
        PATH: ${{ github.workspace }}/scripts:${{ env.PATH }}  # Preserve system PATH
      run: |
        # Create downloads directory if missing
        mkdir -p downloads
        
        # Enable debug output
        export PYTHONVERBOSE=1
        python -v scripts/downloader.py
        
        # Check downloads using find instead of ls
        if [ -z "$(find downloads -maxdepth 1 -type f -name '*.apk')" ]; then
          echo "::error::No APKs were downloaded to downloads directory"
          exit 1
        fi
        
    - name: Check for split APKs
      id: check-splits
      run: |
        config_type=$(python -c "import yaml; print(yaml.safe_load(open('configs/apps/${{ matrix.app }}.yaml'))['source'].get('type', 'apk'))")
        needs_merge=false
        if [[ "$config_type" == "bundle" || "$config_type" == "split" ]]; then
          needs_merge=true
        fi
        echo "needs_merge=$needs_merge" >> $GITHUB_OUTPUT
        
    - name: Merge split APKs
      if: steps.check-splits.outputs.needs_merge == 'true'
      run: |
        # Get latest release info and asset name
        release_info=$(curl -s https://api.github.com/repos/REAndroid/APKEditor/releases/latest)
        jar_name=$(echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".jar")) | .name')
        wget -q "https://github.com/REAndroid/APKEditor/releases/latest/download/$jar_name"
        python scripts/merger.py
        
    - name: Apply ReVanced patches
      run: |
        mkdir -p ${{ env.DIST_DIR }}
        
        # Get latest release info (including pre-releases) and asset names
        set -euxo pipefail  # Enable verbose output and error checking
        
        release_info=$(curl -s "https://api.github.com/repos/anddea/revanced-patches/releases" | jq '[.[] | select(.prerelease or .draft | not)][0]')
        patches_json_url=$(echo "$release_info" | jq -r '.assets[] | select(.name=="patches.json") | .browser_download_url')
        patches_rvp_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".rvp")) | .browser_download_url')
        
        # Get CLI release info and download URL
        cli_release_info=$(curl -s "https://api.github.com/repos/inotia00/revanced-cli/releases/latest")
        cli_version=$(echo "$cli_release_info" | jq -r '.tag_name' | sed 's/^v//')
        cli_jar_url=$(echo "$cli_release_info" | jq -r '.assets[] | select(.name | startswith("revanced-cli-") and endswith("-all.jar")) | .browser_download_url')
        
        wget -nv "$patches_rvp_url"
        wget -nv "$patches_json_url"
        wget -nv "$cli_jar_url" -O "revanced-cli-all.jar"  # Save with consistent name for patcher.py
        
        if [ -f "versions.lock" ]; then
          versions=$(python -c "import yaml;print(yaml.safe_load(open('versions.lock'))['${{ matrix.app }}']['apk_version'])")
          app_version=$(echo $versions | cut -d' ' -f1)
          patch_version=$(echo $versions | cut -d' ' -f2)
          
          # Add debug output and error handling
          echo "Starting patching process for ${{ matrix.app }}"
          python -v scripts/patcher.py --app ${{ matrix.app }} --version $app_version --patch-version $patch_version || {
            echo "::error::Patching failed for ${{ matrix.app }}"
            exit 1
          }
        else
          echo "::warning::No versions.lock file found, skipping versioned patching"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: patched-apks
        path: ${{ env.DIST_DIR }}/*.apk
        retention-days: ${{ steps.build-rules.outputs.retention_days }}
        
    - name: Create release
      uses: softprops/action-gh-release@v1
      if: success()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ env.DIST_DIR }}/*.apk
        tag_name: patched-${{ github.run_id }}
        generate_release_notes: true

    - name: Load build rules
      id: build-rules
      run: |
        retention_days=$(python -c "import yaml; print(yaml.safe_load(open('configs/build_rules.yaml'))['global']['retention_days'])")
        echo "retention_days=$retention_days" >> $GITHUB_OUTPUT

    - name: Cleanup old artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: ${{ steps.build-rules.outputs.retention_days }} days
        skip: latest

    - name: Check for updates
      id: version-check
      run: |
        python scripts/version_check.py
        updates=$(jq -r '. | length' versions.json)
        echo "updates_found=$updates" >> $GITHUB_OUTPUT

    - name: Build components
      if: steps.version-check.outputs.updates_found > 0 || inputs.force == 'true'
      run: |
        # Existing build steps