name: ReVanced Builder

on:
  schedule:
    - cron: '0 0 * * *' # Daily build
  workflow_dispatch:
    inputs:
      force:
        description: 'Force rebuild'
        type: boolean
        required: false
        default: false
      youtube:  # Default apps, will be merged with dynamic ones
        description: 'Build YouTube'
        type: boolean
        required: false
        default: false

env:
  CONFIG_DIR: configs
  DOWNLOAD_DIR: downloads
  DIST_DIR: dist

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter-apps.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: list-apps
        uses: ./.github/actions/list-apps
      - id: filter-apps
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            # For scheduled runs, include all apps
            echo "matrix=${{ steps.list-apps.outputs.matrix }}" >> $GITHUB_OUTPUT
          else
            # For manual runs, filter based on selected apps
            apps=$(echo '${{ steps.list-apps.outputs.matrix }}' | jq -c '[.[] | select(${{ toJSON(github.event.inputs) }}[.]=="true")]')
            echo "matrix=$apps" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.prepare.outputs.matrix) }}
    permissions:
      contents: write  # Needed to create releases
      packages: write  # Needed if uploading to packages
      actions: write  # Needed for workflow interactions
    
    if: ${{ fromJson(needs.prepare.outputs.matrix) != '[]' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ${{ env.DOWNLOAD_DIR }}
          ${{ env.DIST_DIR }}
        key: ${{ runner.os }}-apks-${{ hashFiles('configs/*.yaml') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests natsort
        sudo apt-get update
        sudo apt-get install -y xmlstarlet jq curl wget
        sudo apt-get install -y jq
        
        # Create scripts directory if it doesn't exist
        mkdir -p scripts
        
        # Use our own hosted apkmd version
        echo "Downloading apkmd..."
        if ! wget -q "https://raw.githubusercontent.com/The-Golden-Ingot/Auto-Revanced/main/scripts/apkmd" -O scripts/apkmd; then
          echo "::error::Failed to download apkmd"
          exit 1
        fi
        
        # Make apkmd executable and verify permissions
        chmod +x scripts/apkmd
        if ! [ -x "scripts/apkmd" ]; then
          echo "::error::Failed to make apkmd executable"
          exit 1
        fi
        
        # Install apkmd dependencies
        echo "Installing apkmd dependencies..."
        sudo apt-get install -y python3-bs4 python3-requests
        
        # Verify apkmd installation
        echo "Verifying apkmd installation..."
        if ! scripts/apkmd --version; then
          echo "apkmd verification failed, but continuing..."
        fi
        
        # Add scripts to PATH
        echo "$PWD/scripts" >> $GITHUB_PATH

    - name: Verify Config
      run: |
        echo "Checking config for ${{ matrix.app }}"
        python -c "
        import yaml
        with open('configs/apps/${{ matrix.app }}.yaml') as f:
            config = yaml.safe_load(f)
        print('Config contents:')
        print(yaml.dump(config))
        "

    - name: Setup directories
      run: |
        mkdir -p downloads
        chmod 777 downloads
        echo "Created downloads directory with permissions:"
        ls -la downloads

    - name: Download patches and CLI
      run: |
        set -euxo pipefail
        # Single source for patches.json download
        release_info=$(curl -s "https://api.github.com/repos/anddea/revanced-patches/releases" | jq '[.[] | select(.prerelease or .draft | not)][0]')
        patches_json_url=$(echo "$release_info" | jq -r '.assets[] | select(.name=="patches.json") | .browser_download_url')
        patches_rvp_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".rvp")) | .browser_download_url')
        
        # Download patches files once with clean names
        wget -nv "$patches_rvp_url" -O "patches.rvp"
        wget -nv "$patches_json_url" -O "patches.json"  # ← Force specific filename
        
        # Get CLI
        cli_release_info=$(curl -s "https://api.github.com/repos/inotia00/revanced-cli/releases/latest")
        cli_jar_url=$(echo "$cli_release_info" | jq -r '.assets[] | select(.name | startswith("revanced-cli-") and endswith("-all.jar")) | .browser_download_url')
        wget -nv "$cli_jar_url" -O "revanced-cli-all.jar"

    - name: Download APKs
      run: |
        # Ensure clean environment
        rm -rf downloads/*
        mkdir -p downloads
        chmod 777 downloads
        
        # Preserve original patches.json
        cp patches.json patches.workflow.json
        
        # Run downloader with debug and explicit path
        PATH="$PWD/scripts:$PATH" python scripts/downloader.py --app ${{ matrix.app }} --debug
        
        # Verify downloads
        echo "Downloaded files:"
        /usr/bin/find downloads -name '*.apk' -ls
        
        if [ -z "$(/usr/bin/find downloads -name '*.apk')" ]; then
          echo "::error::No APKs downloaded for ${{ matrix.app }}"
          exit 1
        fi
        
    - name: Check for split APKs
      id: check-splits
      run: |
        config_type=$(python -c "import yaml; print(yaml.safe_load(open('configs/apps/${{ matrix.app }}.yaml'))['source'].get('type', 'apk'))")
        needs_merge=false
        if [[ "$config_type" == "bundle" || "$config_type" == "split" ]]; then
          needs_merge=true
        fi
        echo "needs_merge=$needs_merge" >> $GITHUB_OUTPUT
        
    - name: Download APKEditor
      run: |
        release_info=$(curl -s https://api.github.com/repos/REAndroid/APKEditor/releases/latest)
        jar_name=$(echo "$release_info" | jq -r '.assets[] | select(.name | endswith(".jar")) | .name')
        wget -q "https://github.com/REAndroid/APKEditor/releases/latest/download/$jar_name" -O APKEditor.jar
        echo "Downloaded APKEditor: $(ls -lh APKEditor.jar)"
        
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
      with:
        sdk-version: '33'
        
    - name: Install build tools
      run: |
        yes | sdkmanager "platforms;android-33" "build-tools;33.0.2"

    - name: Check versions
      id: version-check
      run: |
        python scripts/version_check.py --app ${{ matrix.app }}
        if [ ... ]; then
          echo "build_needed=true" >> $GITHUB_OUTPUT
        else
          echo "build_needed=false" >> $GITHUB_OUTPUT
        fi

    - name: Process APKs
      if: steps.version-check.outputs.build_needed == 'true'
      run: |
        echo "Processing APKs..."
        
        # First optimize the original APK with APKEditor
        find downloads -type f -name '*.apk' -o -name '*.apks' -o -name '*.xapk' | while read -r apk; do
          if [[ ! "$apk" == *"_optimized"* ]]; then
            output_path="dist/$(basename "${apk%.*}")_optimized.apk"
            echo "Optimizing $apk -> $output_path"
            
            # Create temp directory path
            temp_dir=$(mktemp -d)
            
            # Handle split APKs
            if [[ "$apk" == *".apks" || "$apk" == *".xapk" ]]; then
              merged_path="dist/$(basename "${apk%.*}")_merged.apk"
              python scripts/merger.py --input "$apk" --output "$merged_path"
              apk="$merged_path"
            fi
            
            # Decode and optimize
            java -jar APKEditor.jar d -i "$apk" -o "$temp_dir"
            java -jar APKEditor.jar b -i "$temp_dir" -o "$output_path" \
              $(awk '/architectures/{for(i=1;i<=NF;i++) if($i=="--remove-lib") printf "--remove-lib %s ", $(i+1)}' configs/build_rules.yaml)
            
            rm -rf "$temp_dir"
          fi
        done
        
        # Then patch the optimized APKs with ReVanced
        python scripts/patcher.py --app ${{ matrix.app }} --version "$app_version" --patch-version "$patch_version"

    - name: Load build rules
      id: build-rules
      run: |
        retention_days=$(python -c "import yaml; print(yaml.safe_load(open('configs/build_rules.yaml'))['global']['retention_days'])")
        echo "retention_days=$retention_days" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: patched-apks
        path: ${{ env.DIST_DIR }}/*.apk
        retention-days: ${{ steps.build-rules.outputs.retention_days }}
        
    - name: Create release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        TAG_NAME="patched-$(date +%Y%m%d-%H%M%S)"
        gh release create "$TAG_NAME" \
          --title "Patched Apps $(date '+%Y-%m-%d')" \
          --notes "Automated build of patched applications" \
          ./dist/*.apk

    - name: Cleanup old artifacts
      uses: c-hive/gha-remove-artifacts@v1
      with:
        age: ${{ steps.build-rules.outputs.retention_days }} days
        skip-recent: 1  # Keep the most recent artifact instead of using 'skip: latest'

    - name: Build components
      if: steps.version-check.outputs.updates_found > 0 || inputs.force == 'true'
      run: |
        # Existing build steps
